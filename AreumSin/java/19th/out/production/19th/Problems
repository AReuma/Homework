* 문제가 되는 부분들

1. RolePlayingGame 클래스에 그냥 대놓고 사용하려고 하는 모든 클래스가 미리 선 할당되어 있다.
   -> 파생되는 문제점
       다루는 캐릭터들이 많아지고 확장됨에 따라 모든 클래스를 다 때려 넣어야 하기에 상당히 지저분한 코드가 만들어짐.
       (결국 유지보수가 매우 난해해진다는 문제점)

2. ArrayList가 member와 이를 검사하는 구조로 비효율적으로 구성됨.
    -> 파생되는 문제점
        가독성이 떨어짐 (레이드 멤버까지는 알겠다가 갑자기 숫자는..?)
        ArrayList를 다루는데 있어 논리적으로 복잡해지는 문제점이 발생함.
        (한눈에 알아보기 힘듬)

3. chooseMember()와 같은 역활은 CharacterManager 가 해주는것이 맞음.
    -> 파생되는 문제점
        하나의 도메인이 여러 작업을 맡아서 진행하기 때문에 복잡성이 증대함.
        (결론적으로 규모가 커지면 혼선이 발생할 수 있음)

4. 시간내 완성하기 위해 기존에 잘 돌던 코드가 동작하지 않게 망쳐놓음.
    -> 파생되는 문제점
        어떤 프로그램을 만들때 기존에 잘 돌던것이 돌지 않게 되면 매우 심각한 문제(현업에서)
        (서비스가 돌고 있는 시점에 서비스가 폭파하는 대.참.사 가 발생함)

    # 우리는 교육이라는 특성상 정해진 시간내 마무리를 위해서 일종의 꼼술르 사용했지만
      현업에서는 이런 상황이면 차분하게 그냥 하루 미루는게 좋다.

* 해결책

1. 우선 CharacterManager 를 만들어서 전체 캐릭터들을 관리할 수 있게 만들어야함.
2. CharacterManager 를 만든 이후 기존 사냥 시퀀스를 다시 분서해볼 필요가 있음 (보류)